{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Media Framing","text":"<p>The media plays a unique role in shaping public opinion and setting the agenda. This project identifies the tone used to report the 2024 U.S. elections in the Wall Street Journal. It is important to examine how the media report relevant events such as elections. Electorates form their judgments about an election based on the information received from the media. Therefore, the overarching question guiding this project is: \"How does the media frame the U.S. Elections?\"</p> <p>\u00a92023  This is an academic project.</p>"},{"location":"data/","title":"Data","text":"<p>This part of the media framing  project documentation contains the saved data derived from running the abovementioned scripts in the workflow. For example, the headlines.txt is derived whenever the scrape_headlines.py script is run. This .txt file will aggregate all the headlines on the website at that given time. Hence, it is important to highlight that .txt is a fluid file, and it is bound to change depending on when the scraping process takes place. Also, this is likely to impact the output throughout the process. Other data files include analysis_results.csv,lda_model_20topics.model, and processed_headlines.txt.</p>"},{"location":"output/","title":"Output","text":"<p>This part of the media framing project documentation contains the visualization derived from the data folder. The main visualization includes the most common words used in the headlines. I plotted some word clouds and bar graphs.</p> <p></p> <p></p>"},{"location":"scripts/","title":"Scripts","text":"<p>This part of the media framing project documentation contains the major functions used in the six-step process of this project (scrape headlines, process headlines, analyze headlines, topic modeling using the Latent Dirichlet Allocation (LDA) technique, testing the functions created, and visualizing the model output).</p> <p></p>"},{"location":"scripts/#functions","title":"Functions","text":""},{"location":"scripts/#step-1-scrape-headlines","title":"Step 1: Scrape Headlines","text":"<p><code>scrape_and_save_headlines</code>  This function scrapes headlines from a given URL and saves them to a text file.</p>"},{"location":"scripts/#step-2-preprocess-text","title":"Step 2: Preprocess Text","text":"<p><code>preprocess_text</code> This function preprocess a given text by tokenizing, removing stopwords, and punctuation.</p> <p><code>read_headlines_from_file</code>  This function reads headlines from a file.</p> <p><code>preprocess_and_save_headlines</code> This function preprocess a list of headlines by tokenizing, removing stopwords, and punctuation and save the processed headlines to a text file.</p>"},{"location":"scripts/#step-3-analyze-content","title":"Step 3: Analyze Content","text":"<p><code>analyze_content</code> This function analyzes the content of processed headlines and generates a DataFrame with word frequencies.</p>"},{"location":"scripts/#step-4-train-lda-model","title":"Step 4: Train LDA Model","text":"<p><code>train_lda_model</code> This function trains an LDA model using processed headlines.</p> <p><code>save_lda_model</code> This function saves the trained LDA model to a file.</p> <p><code>print_topics</code> This function prints topics and their top words.</p>"},{"location":"scripts/#step-5-testing","title":"Step 5: Testing","text":"<p><code>TestContentAnalysis</code> This function tests the analyze_content function.</p> <p><code>test_preprocess_text</code> This function tests the preprocess_text function.</p> <p><code>test_lda_model</code> This function tests the performance of the LDA model using coherence score.</p>"},{"location":"scripts/#step-6-visualize","title":"Step 6: Visualize","text":"<p><code>visualize_wordcloud</code> This function generates a word cloud and bar graph from the processed headlines.</p>"}]}